global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private
	ssl-dh-param-file /etc/haproxy/dhparams-2048.pem

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	#option	httplog
	option	dontlognull
    timeout connect 5000
    timeout client  50000
    timeout server  50000
    default-server init-addr last,libc,none
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

frontend frontend-http
    bind :80
    mode http

    # ACL for detecting Let's Encrypt validation requests
    acl is_certbot path_beg /.well-known/acme-challenge/
    use_backend backend-certbot if is_certbot

    ## without acme-challenge we'll redirect to https
    ## because our service won't work on non-ssl
    http-request redirect scheme https if ! is_certbot

    ## by default it will be certbot server
    default_backend backend-certbot

backend backend-certbot
    mode http
    server certbot 127.0.0.1:9080

frontend ft_ssl
    mode tcp

    # HAProxy will take the fitting certificate from the available ones
    bind *:443 ssl crt /etc/haproxy/ssl/

    tcp-request inspect-delay 5s
    tcp-request content accept if { req_ssl_hello_type 1 }

    # Pass TURN requests to LiveKit Turn server
    # LiveKit expects unencrypted traffic on tls_port,
    # and still advertise tls_port as a TURN/TLS candidate.
    use_backend bk_livekit_turn  if { ssl_fc_sni -i TURN_SERVER_DOMAIN }

    ## default will be bk_tcp_to_plugnmeet
    default_backend bk_tcp_to_plugnmeet

backend bk_livekit_turn
    mode tcp
    # For Firefox require machine's IP otherwise won't work.
    # Forward the raw TCP stream to the LiveKit server's TURNS port.
    server local MACHINE_IP:5349 check send-proxy-v2

backend bk_tcp_to_plugnmeet
    mode tcp
    server local 127.0.0.1:81 check send-proxy

frontend ft_plugnmeet
    mode http
    bind *:81 accept-proxy

    acl etherpad path_beg /etherpad
    acl livekit path_beg /livekit
    acl ingress path_beg /whip
    acl nats path_beg /ws

    use_backend bk_etherpad if etherpad
    use_backend bk_livekit_api if livekit
    use_backend bk_ingress if ingress
    use_backend bk_nats if nats

    default_backend bk_plugnmeet_server

backend bk_plugnmeet_server
    mode http
    option forwardfor
    ## by default we're assuming it should be https, in case if not
    http-request set-header X-Forwarded-Proto http if !{ ssl_fc }

    option httpchk
    http-check send meth HEAD uri /healthCheck
    http-check expect status 200

    # Pass the requests to plugnmeet-server
    server local 127.0.0.1:8080 check

backend bk_livekit_api
    mode http
    option forwardfor
    http-request set-path "%[path,regsub(^/livekit/,/)]"

    # Pass the requests to the LiveKit HTTP API
    server local 127.0.0.1:7880 check

backend bk_etherpad
    mode http
    option forwardfor
    http-request set-path "%[path,regsub(^/etherpad/,/)]"

    # Pass the requests to etherpad
    server local 127.0.0.1:9001 check

backend bk_nats
    mode http
    option forwardfor
    option http-server-close
    timeout tunnel 1h
    http-request set-path "%[path,regsub(^/ws/,/)]"

    server local 127.0.0.1:8222 check

backend bk_ingress
    mode http

    # Pass the requests to ingress
    server local 127.0.0.1:8089 check

listen rtmp
  bind *:1935
  mode tcp

  server local 127.0.0.1:1936 check
